{"version":3,"sources":["store/counter.js","store/store.js","common/title.js","views/home/home.js","views/home/index.js","common/counter.js","views/counter/Counter.container.js","store/navigation.js","views/counter/Counter.view.js","views/viewport/Viewport.view.js","views/viewport/Viewport.container.js","views/app/App.js","serviceWorker.js","index.js"],"names":["initial","processingCount","isCreating","isReading","isUpdating","isDeleting","collection","id","name","count","store_counter","state","arguments","length","undefined","action","type","payload","_objectSpread","createRootReducer","history","combineReducers","router","connectRouter","counter","createBrowserHistory","Title","_ref","text","react_default","a","createElement","HomeView","title_Title","buttons","onClick","this","props","Component","connect","dispatch","bindActionCreators","push","Counter","update","destroy","card","interactive","elevation","Elevation","TWO","className","html","editableText","intent","maxLength","placeholder","selectAllOnFocus","icon","create","create_counter_req","setTimeout","error","response","res","actions","read","query","read_counter_req","update_counter_req","destroy_counter_req","toSignup","toLogin","map","c","counter_Counter","key","renderCounterList","ViewportView","navbar","navbarGroup","align","Alignment","LEFT","navbarHeading","navbarDivider","Classes","MINIMAL","toHome","toCounter","RIGHT","react_router","exact","path","render","home","Counter_container","store","preloadedState","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","routerMiddleware","thunk","initStore","App","es","esm","Viewport_container","Boolean","location","hostname","match","ReactDOM","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b517e65.chunk.js","sourcesContent":["////////////////\n// INITIAL STATE\n////////////////\nconst initial = {\n    processingCount: 0,\n    isCreating: false,\n    isReading: false,\n    isUpdating: false,\n    isDeleting: false,\n    collection: [\n        { id: '45jk', name: 'Counter One', count: 45 },\n        { id: '46jk', name: 'Times I forgot something', count: 100 },\n        { id: '47jk', name: 'Coffee cups consumed', count: 5000 },\n        { id: '48jk', name: 'Time I did not wake up', count: 37 }\n    ]\n};\n\n//////////\n// ACTIONS\n//////////\n// CREATE\nexport const CREATE_COUNTER         = \"counter/CREATE\";\nexport const CREATE_COUNTER_SUCCESS = \"counter/CREATE_SUCCESS\";\nexport const CREATE_COUNTER_ERROR   = \"counter/CREATE_ERROR\";\n\nexport const create_counter_req = counter => ({\n    type: CREATE_COUNTER,\n    payload: counter\n});\n\nexport const create_counter_suc = response => ({\n    type: CREATE_COUNTER_SUCCESS,\n    payload: response\n});\n\nexport const create_counter_err = error => ({\n    type: CREATE_COUNTER_ERROR,\n    payload: error\n});\n\nexport const CreateCounter = counter => dispatch => {\n    // update the store for a instant rerender\n    dispatch(create_counter_req(counter));\n\n    // make async call\n    return setTimeout((res = true) => {\n        if (res) {\n            // if successful\n            dispatch(create_counter_suc())\n        } else {\n            // if error\n            dispatch(create_counter_err())\n        }\n    }, 1500);\n};\n\n// READ\nexport const READ_COUNTERS         = \"counter/READ\";\nexport const READ_COUNTERS_SUCCESS = \"counter/READ_SUCCESS\";\nexport const READ_COUNTERS_ERROR   = \"counter/READ_ERROR\";\n\nexport const read_counter_req = query => ({\n    type: READ_COUNTERS,\n    payload: query\n});\n\nexport const read_counter_suc = response => ({\n    type: READ_COUNTERS_SUCCESS,\n    payload: response\n});\n\nexport const read_counter_err = error => ({\n    type: READ_COUNTERS_ERROR,\n    payload: error\n});\n\nexport const ReadCounter = query => dispatch => {\n    // update the store for a instant rerender\n    dispatch(read_counter_req(query));\n\n    // make async call\n    return setTimeout((res = true) => {\n        if (res) {\n            // if successful\n            dispatch(read_counter_suc())\n        } else {\n            // if error\n            dispatch(read_counter_err())\n        }\n    }, 1500);\n};\n\n// UPDATE\nexport const UPDATE_COUNTER         = \"counter/UPDATE\";\nexport const UPDATE_COUNTER_SUCCESS = \"counter/UPDATE_SUCCESS\";\nexport const UPDATE_COUNTER_ERROR   = \"counter/UPDATE_ERROR\";\n\nexport const update_counter_req = counter => ({\n    type: UPDATE_COUNTER,\n    payload: counter\n});\n\nexport const update_counter_suc = response => ({\n    type: UPDATE_COUNTER_SUCCESS,\n    payload: response\n});\n\nexport const update_counter_err = error => ({\n    type: UPDATE_COUNTER_ERROR,\n    payload: error\n});\n\nexport const UpdateCounter = counter => dispatch => {\n    // update the store for a instant rerender\n    dispatch(update_counter_req(counter));\n\n    // make async call\n    return setTimeout((res = true) => {\n        if (res) {\n            // if successful\n            dispatch(update_counter_suc())\n        } else {\n            // if error\n            dispatch(update_counter_err())\n        }\n    }, 1500);\n};\n\n// DELETE\nexport const DESTROY_COUNTER         = \"counter/DESTROY\";\nexport const DESTROY_COUNTER_SUCCESS = \"counter/DESTROY_SUCCESS\";\nexport const DESTROY_COUNTER_ERROR   = \"counter/DESTROY_ERROR\";\n\nexport const destroy_counter_req = counter => ({\n    type: DESTROY_COUNTER,\n    payload: counter\n});\n\nexport const destroy_counter_suc = response => ({\n    type: DESTROY_COUNTER_SUCCESS,\n    payload: response\n});\n\nexport const destroy_counter_err = error => ({\n    type: DESTROY_COUNTER_ERROR,\n    payload: error\n});\n\nexport const DestroyCounter = counter => dispatch => {\n    // destroy the store for a instant rerender\n    dispatch(destroy_counter_req(counter));\n\n    // make async call\n    return setTimeout((res = true) => {\n        if (res) {\n            // if successful\n            dispatch(destroy_counter_suc())\n        } else {\n            // if error\n            dispatch(destroy_counter_err())\n        }\n    }, 1500);\n};\n\n//////////\n// REDUCER\n//////////\nexport default (state = initial, action) => {\n    const {type, payload} = action;\n\n    switch (type) {\n        case CREATE_COUNTER:\n            debugger;\n            return {\n                ...state,\n                count: {payload},\n                processingCount: state.processingCount++\n            };\n\n        default:\n            return state\n    }\n}\n\n","import { createBrowserHistory } from \"history\";\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router'\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router'\nimport thunk from 'redux-thunk';\n\nimport counter from './counter';\n\nexport function initStore(preloadedState) {\n    // TODO -> add enhancers\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\n    return createStore(\n        createRootReducer(history),\n        preloadedState,\n        composeEnhancers(\n            applyMiddleware(\n                routerMiddleware(history),\n                thunk\n            ),\n        ),\n    );\n}\n\nconst createRootReducer = history =>\n    combineReducers({\n        router: connectRouter(history),\n        counter\n    });\n\nexport const history = createBrowserHistory();","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Title = ({text}) => <h1>{text}</h1>\n\nTitle.propTypes = {\n     text: PropTypes.string.isRequired\n};","import React, {Component} from 'react';\nimport {Button} from \"@blueprintjs/core\";\nimport {Title} from '../../common/title';\n\nexport default class HomeView extends Component {\n  render() {\n    return (\n      <div>\n        <Title text=\"Home\" />\n        \n        <p>Click on the counter to go to the counter page</p>\n\n        <Button\n          text=\"Counter\"\n          onClick={this.props.counter}/>\n      </div>\n    );\n  }\n}","import { push } from 'connected-react-router'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport HomeView from './home';\n\n// bind state in the store to the home view\nconst mapStateToProps = state => {\n  return {}\n};\n\n// bind action methods to component view props\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators(\n    {\n      counter: () => push(\"/counter\")\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeView)","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { EditableText, H1, Button, Card, Elevation } from \"@blueprintjs/core\";\n\nimport './counter.css'\n\nexport const Counter = ({ counter, update, destroy}) => {\n    debugger;\n    return (\n        <Card interactive={true} elevation={Elevation.TWO} className=\"counter\">\n            <H1 className=\"center\">\n                <EditableText\n                    intent={\"primary\"}\n                    maxLength={255}\n                    placeholder={counter.name}\n                    selectAllOnFocus={true}/>\n            </H1>\n            <div className=\"counterActions\">\n                <Button\n                    icon=\"add\"\n                    intent=\"success\"\n                    className=\"counterButton\"\n                    onClick={update()}/>\n\n                <span className=\"counterValue\">{counter.count}</span>\n\n                <Button\n                    icon=\"remove\"\n                    intent=\"success\"\n                    className=\"counterButton\"\n                    onClick={update()}/>\n            </div>\n        </Card>\n    );\n};\n\nCounter.propTypes = {\n    counter: PropTypes.object.isRequired,\n    update: PropTypes.func.isRequired,\n    destroy: PropTypes.func.isRequired,\n};","import { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport {CounterView} from './Counter.view';\n\nimport * as actions from \"../../store/counter\"\nimport * as navigation from \"../../store/navigation\";\n\n// bind state in the store to the home view\nconst mapStateToProps = state => {\n    const {counter} = state;\n\n    return {\n        counter\n    }\n};\n\n// bind action methods to component view props\nconst mapDispatchToProps = dispatch =>\n  bindActionCreators({\n      // resource\n      create:  (counter) => actions.CreateCounter(counter),\n      read:    (query)   => actions.ReadCounter(query),\n      update:  (counter) => actions.UpdateCounter(counter),\n      destroy: (id)      => actions.DestroyCounter(id),\n      // global nav\n      toSignup: () => navigation.toSignup(),\n      toLogin:  () => navigation.toLogin(),\n    },\n    dispatch\n  );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CounterView)","import { push } from 'connected-react-router'\n\nexport const toSignup = () => push(\"/signup\");\n\nexport const toLogin = () => push(\"/login\");","import React from 'react';\n\nimport {Counter} from '../../common/counter';\n\nexport const CounterView = ({counter, update, destroy}) => {\n  const {collection} = counter;\n  const renderCounterList = (collection) => {\n      return collection.map((c) => {\n          return <Counter\n              key={c.id}\n              counter={c}\n              update={update}\n              destroy={destroy}/>\n          }\n      )\n  };\n\n  return (\n      <div>{renderCounterList(collection)}</div>\n  )\n};\n","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router'\nimport {\n    Alignment,\n    Button,\n    Classes,\n    Navbar,\n    NavbarDivider,\n    NavbarGroup,\n    NavbarHeading\n} from \"@blueprintjs/core\";\n// Add all view\n// STORY 1 -> Dynamicly load all view with the router somehow\n// would be nice if we could just read all the views that are exported\n// from the views directory\nimport HomeView from '../home'\nimport CounterView from '../counter/Counter.container'\n\nexport default class ViewportView extends Component {\n    render() {\n        return (\n            <div className=\"rootViewPort\">\n                <Navbar className=\"navViewport\">\n                    <NavbarGroup align={Alignment.LEFT}>\n                        <NavbarHeading>Plenum</NavbarHeading>\n                        <NavbarDivider />\n                        <Button\n                            className={Classes.MINIMAL}\n                            icon=\"home\"\n                            text=\"Home\" \n                            onClick={this.props.toHome} />\n\n                        <Button\n                            className={Classes.MINIMAL}\n                            icon=\"document\"\n                            text=\"Counters\" \n                            onClick={this.props.toCounter} />\n                    </NavbarGroup>\n\n                    <NavbarGroup align={Alignment.RIGHT}>\n                        <button className=\"bp3-button bp3-minimal bp3-icon-user\"></button>\n                        <button className=\"bp3-button bp3-minimal bp3-icon-notifications\"></button>\n                        <button className=\"bp3-button bp3-minimal bp3-icon-cog\"></button>\n                    </NavbarGroup>\n\n                </Navbar>\n\n                <div className=\"mainViewport\">\n                    <Switch>\n                        <Route exact path=\"/\" render={() => (<HomeView />)} />\n                        <Route exact path=\"/counter\" render={() => (<CounterView />)} />\n                        <Route render={() => (<div>404</div>)} />\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n","import { push } from 'connected-react-router'\nimport { bindActionCreators } from 'redux'\nimport { connect } from 'react-redux'\n\nimport ViewportView from './Viewport.view';\n\n// bind state in the store to the home view\nconst mapStateToProps = state => {\n    return {};\n};\n\n// bind action methods to component view props\nconst mapDispatchToProps = dispatch =>\n    bindActionCreators(\n        {\n            toHome: () => push(\"/\"),\n            toCounter: () => push(\"/counter\")\n        },\n        dispatch\n    );\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewportView)","import React from 'react';\nimport { Provider } from 'react-redux'\nimport { ConnectedRouter } from 'connected-react-router'\nimport { initStore, history } from '../../store/store'\nimport ViewportView from '../viewport/Viewport.container';\n\nconst store = initStore({});\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Provider store={store}>\n        <ConnectedRouter history={history}>\n          <ViewportView />\n        </ConnectedRouter>\n      </Provider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}